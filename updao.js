// Generated by LiveScript 1.5.0
(function(){
  var ref$, get, post, presaleAbi, tokenAbi, newStandard, createContract, tokensaleContract, tokenContract, parseJson, deadline, extractSignature, getProjectsBuilder, getDataBuilder, toWeiBuilder, createAuthorisedTx, claimTokensBuilder, whitelistBuyBuilder, getProjectDetailsBuilder, addProjectBuilder, factory, toString$ = {}.toString;
  ref$ = require('superagent'), get = ref$.get, post = ref$.post;
  presaleAbi = require('./ProdPrivateSale.abi.json');
  tokenAbi = require('./ProdToken.abi.json');
  newStandard = function(web3, abi, address){
    var contract;
    contract = new web3.eth.Contract(abi, address);
    contract.abi = abi;
    return contract;
  };
  createContract = function(web3, abi, address){
    switch (false) {
    case toString$.call(web3.eth.contract).slice(8, -1) !== 'Function':
      return web3.eth.contract(abi).at(address);
    default:
      return newStandard(web3, abi, address);
    }
  };
  tokensaleContract = curry$(function(web3, address){
    return createContract(web3, presaleAbi, address);
  });
  tokenContract = curry$(function(web3, address){
    return createContract(web3, tokenAbi, address);
  });
  parseJson = function(text, cb){
    var e;
    try {
      return cb(null, JSON.parse(text));
    } catch (e$) {
      e = e$;
      return cb("Cannot parse json");
    }
  };
  deadline = 3000;
  extractSignature = function(signature){
    var sig, r, s, v;
    sig = signature.slice(2);
    r = '0x' + sig.slice(0, 64);
    s = '0x' + sig.slice(64, 128);
    v = '0x' + sig.slice(128, 130);
    return {
      v: v,
      r: r,
      s: s
    };
  };
  getProjectsBuilder = function(url){
    return function(cb){
      return get(url + "/api/projects").timeout({
        deadline: deadline
      }).end(function(err, data){
        if (err != null) {
          return cb(err);
        }
        return parseJson(data.text, function(err, model){
          if (err != null) {
            return cb(err);
          }
          return cb(null, model);
        });
      });
    };
  };
  getDataBuilder = function(contract, method){
    switch (false) {
    case contract.methods == null:
      return function(){
        return contract.methods[method].apply(null, Array.from(arguments)).encodeABI();
      };
    default:
      return contract[method].getData;
    }
  };
  toWeiBuilder = function(web3){
    var ref$;
    return (ref$ = web3.toWei) != null
      ? ref$
      : web3.utils.toWei;
  };
  createAuthorisedTx = function(arg$, cb){
    var type, url, web3, token, amountEthers, method, contractAddress, address, contract;
    type = arg$.type, url = arg$.url, web3 = arg$.web3, token = arg$.token, amountEthers = arg$.amountEthers, method = arg$.method, contractAddress = arg$.contractAddress;
    address = web3.eth.defaultAccount;
    if (web3.eth.defaultAccount == null) {
      return cb("web3.eth.defaultAccount is not defined");
    }
    contract = tokensaleContract(web3, contractAddress);
    return get(url + "/api/perm/" + type + "/" + token + "/" + address).timeout({
      deadline: deadline
    }).end(function(err, data){
      var accessKey, signature, length, ref$, v, r, s, getData, toWei, transaction;
      if (err != null) {
        return cb(data.text);
      }
      accessKey = JSON.parse(data.text);
      signature = accessKey.signature, length = accessKey.length;
      ref$ = extractSignature(signature), v = ref$.v, r = ref$.r, s = ref$.s;
      getData = getDataBuilder(contract, method);
      toWei = toWeiBuilder(web3);
      transaction = {
        to: contractAddress,
        gas: 500000,
        value: toWei(amountEthers + "", 'ether').toString(),
        data: getData(length, token, v, r, s)
      };
      return web3.eth.sendTransaction(transaction, cb);
    });
  };
  claimTokensBuilder = function(web3, url){
    return function(arg$, cb){
      var token, contractAddress, type, amountEthers, method;
      token = arg$.token, contractAddress = arg$.contractAddress;
      type = 'claim';
      amountEthers = 0;
      method = 'claimTokens';
      return createAuthorisedTx({
        type: type,
        url: url,
        web3: web3,
        token: token,
        method: method,
        contractAddress: contractAddress
      }, cb);
    };
  };
  whitelistBuyBuilder = function(web3, url){
    return function(arg$, cb){
      var amountEthers, token, contractAddress, type, method;
      amountEthers = arg$.amountEthers, token = arg$.token, contractAddress = arg$.contractAddress;
      type = 'contrib';
      method = 'whitelistBuy';
      return createAuthorisedTx({
        type: type,
        url: url,
        web3: web3,
        token: token,
        method: method,
        contractAddress: contractAddress
      }, cb);
    };
  };
  getProjectDetailsBuilder = function(url){
    return function(token, cb){
      return get(url + "/api/project/" + token).timeout({
        deadline: deadline
      }).end(function(err, data){
        if (err != null) {
          return cb(err);
        }
        return parseJson(data.text, function(err, model){
          if (err != null) {
            return cb(err);
          }
          return cb(null, model);
        });
      });
    };
  };
  addProjectBuilder = curry$(function(url, model, cb){
    return post(url + "/api/add", model).timeout({
      deadline: deadline
    }).end(function(err, data){
      var ref$;
      if (err != null) {
        return cb((ref$ = data != null ? data.text : void 8) != null ? ref$ : err);
      }
      return parseJson(data.text, function(err, model){
        if (err != null) {
          return cb(err);
        }
        return cb(null, model);
      });
    });
  });
  factory = function(web3, url){
    var tokensaleContractAt, tokenContractAt, getProjects, getProjectDetails, addProject, claimTokens, whitelistBuy;
    tokensaleContractAt = tokensaleContract(web3);
    tokenContractAt = tokenContract(web3);
    getProjects = getProjectsBuilder(url);
    getProjectDetails = getProjectDetailsBuilder(url);
    addProject = addProjectBuilder(url);
    claimTokens = claimTokensBuilder(web3, url);
    whitelistBuy = whitelistBuyBuilder(web3, url);
    return {
      addProject: addProject,
      getProjects: getProjects,
      getProjectDetails: getProjectDetails,
      tokensaleContractAt: tokensaleContractAt,
      tokenContractAt: tokenContractAt,
      claimTokens: claimTokens,
      whitelistBuy: whitelistBuy
    };
  };
  module.exports = factory;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
